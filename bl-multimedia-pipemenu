#!/bin/bash
# ---------------------------------------------------------------------
# An Openbox pipemenu for Multimedia applications.
#
# Originally written for CrunchBang Linux <http://crunchbang.org/>
# by Philip Newborough (aka corenominal) <mail@philipnewborough.co.uk>
#
# Modified by <damo> for BunsenLabs Linux   April 2015
#
#   To change the entries shown in the Multimedia pipemenu:
#   edit ".config/openbox/pipemenus.rc"
#
# ---------------------------------------------------------------------

BL_COMMON_LIBDIR='/usr/lib/bunsen/bunsen-common'
BL_INCLUDE='/usr/bin'   # used for editor and utility pipemenus
USR_CFG='.config/openbox/pipemenus.rc'

source $USR_CFG

# If the package needs additional configuration before installation
# create a function called setupappName, it will be called automatically.

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG" 2> /dev/null; then
    echo $"Error: Failed to locate pipemenu.rc in $USR_CFG" >&2
    exit 1
fi

appExists() {
    for curApp in "${MM_APPS[@]}"; do # if $packageName exists in MM_APPS array
        [[ $curApp = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such application that I know of." 1 >&2
    say "You can try one of these: ${MM_APPS[*]}" 2 >&2
    return 1
}

if [[ $1 && ! $1 = --install-* ]]; then
    packageName=${1#--}
    read -ra words <<< "${packageName//-/ }"
    x-terminal-emulator -T "Install ${words[*]^}" -e "$0" "--install-$packageName"

elif [[ $1 = --install-* ]]; then
    packageName=${1#--install-}
    appExists "$packageName" || exit 1
    appName=${packageName//-/ }
    read -ra words <<< "$appName"
    appName=${words[*]^}
    appNameUpper=${appName^^}

    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupBlender'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
        promptInstall --setup "$setupFunctionName" "${appNameUpper% APP} APP" "$appName" "$packageName"
    else
        promptInstall "${appNameUpper% APP} APP" "$appName" "$packageName"
    fi

else # pipemenu
    menuStart
    for curApp in "${MM_APPS[@]}"; do
        read -ra words <<< "${curApp//-/ }"
        echo "$curApp"
        curAppName=${words[*]^}
        if type "$curApp" &> /dev/null; then
            # change name of smplayer (gui frontend for mplayer)
            if [[ "$curApp" = "smplayer" ]];then
                menuItem "Gnome mplayer" "$curApp"
                curAppName=${words[*]^}
            elif [[ "$curApp" = "mpv" ]];then # set mpv to start with gui window
                menuItem "$curAppName" "$curApp --force-window --idle"
            else
                menuItem "$curAppName" "$curApp"
            fi
        else
            if [[ "$curAppName" == "Smplayer" ]]; then
                menuItem "Install Gnome mplayer" "$0 --$curApp"
            else
                menuItem "Install $curAppName" "$0 --$curApp"
            fi
        fi
    done
    menuSeparator
    menuSeparator 'Editors'
    # get editors pipemenu
    if ! type "bl-mmeditors-pipemenu" &> /dev/null; then
        echo $"Error: Failed to locate bl-mmeditors-pipemenu in $BL_INCLUDE" >&2
        exit 1
    else
        echo $(bl-mmeditors-pipemenu)
    fi
    menuSeparator
    menuSeparator 'Utilities'
    # get utilities pipemenu
    if ! type "bl-mmutils-pipemenu" &> /dev/null; then
        echo $"Error: Failed to locate bl-mmutils-pipemenu in $BL_INCLUDE" >&2
        exit 1
    else
        echo $(bl-mmutils-pipemenu)
    fi
    menuEnd
fi
exit 0
