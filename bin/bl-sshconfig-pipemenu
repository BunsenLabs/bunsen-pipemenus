#!/usr/bin/env python3

#    bl-sshconfig-pipemenu - an Openbox pipemenu for Graphics applications
#
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#    Copyright (C) 2015  Ankur Khanna
#    Copyright (C) 2016 xaos52 <xaos52@bunsenlabs.org>
#    Copyright (C) 2018 tknomanzr <webradley9929@gmail.com>
#    Copyright (C) 2020 jmechnich
#                       Jens John <dev@2ion.de>
#                       John Crawley <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

from pathlib import Path
from shlex import quote
import argparse
import os
import sys


from paramiko.config import SSHConfig # type: ignore
from lxml import etree as ET # type: ignore


def error(*args, **kwargs):
    _kwargs = {**kwargs}
    _kwargs.update({ "file": sys.stderr })
    print(*args, **_kwargs)


def getopts() -> argparse.Namespace:
    ap = argparse.ArgumentParser(description="""Openbox pipemenu to handle SSH installation and configuration""")
    ap.add_argument("-c", "--config-file", type=Path, default=Path(os.path.expanduser("~/.ssh/config")))
    return ap.parse_args()


def main() -> int:
    opts = getopts()

    config_dir = Path(os.path.dirname(opts.config_file))

    # Ensure that the SSH config directory and at least a stub SSH config file exists.

    if not config_dir.exists():
        try:
            config_dir.mkdir(0o700, parents=True)
        except PermissionError:
            error(f"Permission denied when attempting to create directory: {config_dir}")
            return 1
    if not opts.config_file.exists():
        try:
            with opts.config_file.open("w") as HANDLE:
                HANDLE.write("""
# SSH config file, 'man ssh_config' for more details.

#Host example
#  hostname example.com
#  user johndoe
    """)
            opts.config_file.chmod(0o600)
        except PermissionError:
            error(f"Permission denied when attempting to create stub config: {opts.config_file}")
            return 1

    # Load config, and build a pipemenu with one entry per logical SSH host. We ignore wildcarded
    # hostnames.

    config = SSHConfig()
    try:
        config.parse(open(opts.config_file))
    except Exception as err:
        error(f"Could not open {opts.config_file}: {err}")
        return 1
    hosts = sorted(filter(lambda s: "*" not in s, config.get_hostnames()))
    pipemenu = ET.Element("openbox_pipe_menu")

    # Offer to install SSH tooling if not already completely installed.

    have_sshd = Path("/usr/sbin/sshd").exists()
    if not have_sshd:
        ET.SubElement(
            ET.SubElement(
                ET.SubElement(
                    ET.SubElement(
                        pipemenu,
                        "menu",
                        { "id": "ssh_install", "label": "SSH server"}
                    ),
                    "item",
                    { "label": "Install OpenSSH server" }
                ),
                "action",
                { "name": "Execute" }
            ),
            "command"
        ).text = "bl-install --name 'OpenSSH server and client' bunsen-meta-ssh"
        ET.SubElement(pipemenu, "separator")

    # Build per SSH host menu entries

    for hostname in hosts:
        _hostname = quote(hostname)
        sshcmd = f"x-terminal-emulator -e sh -c 'ssh {_hostname} ; echo \"Press any key to close this window\" ; read REPLY'"
        fscmd = f"bl-file-manager ssh://{_hostname}"
        hostmenu = ET.SubElement( pipemenu, "menu", { "id": hostname, "label": hostname })
        ET.SubElement(
            ET.SubElement(
                ET.SubElement(
                    hostmenu,
                    "item",
                    { "label": "Start terminal session" }
                ),
                "action",
                { "name": "Execute" }
            ),
            "command"
        ).text = sshcmd
        ET.SubElement(
            ET.SubElement(
                ET.SubElement(
                    hostmenu,
                    "item",
                    { "label": "Browse with File Manager" }
                ),
                "action",
                { "name": "Execute" }
            ),
            "command"
        ).text = fscmd

    # Add menu item for editing the SSH config file

    if not have_sshd and len(hosts) != 0:
        ET.SubElement(pipemenu, "separator")
    ET.SubElement(
       ET.SubElement(
           ET.SubElement(
               pipemenu,
               "item",
               { "label": "Edit SSH user config" }
           ),
           "action",
           { "name": "Execute" }
       ),
       "command"
    ).text = f"bl-text-editor {quote(str(opts.config_file))}"

    print(ET.tostring(pipemenu, encoding="unicode", pretty_print=True), end="")

    return 0


if __name__ == "__main__":
    ret = main()
    sys.exit(ret)
