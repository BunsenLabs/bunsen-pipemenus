#!/bin/bash
#    bl-graphics-pipemenu - an Openbox pipemenu for Graphics applications
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#    Copyright (C) 2015-2016 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2015-2016 John Crawley    <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#   To change the entries shown in the Graphics pipemenu:
#   edit ".config/openbox/pipemenus.rc"

HELP='    bl-graphics-pipemenu an Openbox Pipe Menu for graphics applications
    It should normally be called from an openbox menu.

Options (usually passed from the menu):
    -h --help   show this message
    --install   install a graphics-related package
    (the package must be in the list defined in the pipemenu config file)

    If bl-graphics-pipemenu is called with no options (the usual method),
    it will output an xml openbox pipemenu
    for launching and installing graphics applications.

See ~/.config/openbox/pipemenus.rc for configuration options.
'
# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

BL_COMMON_LIBDIR='/usr/lib/bunsen/common'
USR_CFG_DIR="$HOME/.config/openbox"

# Get $USER images directory
if type xdg-user-dir &>/dev/null; then
    IMGDIR=$(xdg-user-dir PICTURES)
else
    IMGDIR="~/Pictures"
fi
# test for screenshots dir, create if it doesn't exist
SCROTSDIR="$IMGDIR/screenshots"
mkdir -p "$SCROTSDIR"

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Error: Failed to source bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG_DIR/pipemenus.rc" 2> /dev/null; then
    echo $"Error: Failed to source pipemenus.rc in $USR_CFG_DIR" >&2
    exit 1
fi

declare -A AppName AppStatus # AppName: split on hyphens, first letter uppercase
for curApp in "${GRAPHICS_APPS[@]}" "${GRAPHICS_SCROTS[@]}"; do
    words=(${curApp//-/ })
    AppName[$curApp]="${words[*]^}"
    type "$curApp" >/dev/null 2>&1 && AppStatus[$curApp]=installed
done

appExists() {
    for curApp in "${GRAPHICS_APPS[@]}"; do # if $packageName exists in GRAPHICS_APPS array
        [[ $curApp = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such application that I know of." 1 >&2
    say "You can try one of these: ${GRAPHICS_APPS[*]}" 2 >&2
    return 1
}

screenshooterExists() {
    for curScrot in "${GRAPHICS_SCROTS[@]}"; do # if $packageName exists in GRAPHICS_SCROTS array
        [[ $curScrot = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such application that I know of." 1 >&2
    say "You can try one of these: ${GRAPHICS_SCROTS[*]}" 2 >&2
    return 1
}

writeScrot() {                  # Write scrot submenu items
    IMG="$SCROTSDIR/%F-%H-%M-%S_scrot.png"
    VIEW="'bl-image-viewer $IMG'"
    menuSubmenu 'scrot' 'scrot Screenshooter'
        menuItem "scrot Now" "scrot $IMG -e $VIEW"
        menuItem "scrot In 5 secs..." "scrot -d 5 $IMG -e $VIEW"
        menuItem "scrot In 10 secs..." "scrot -d 10 $IMG -e $VIEW"
        menuItem "scrot Select Area" "scrot -s $IMG -e $VIEW"
        menuItem "scrot Current Focus" "scrot -u $IMG -e $VIEW"
        menuItem "scrot Multi-Monitor" "scrot -m $IMG -e $VIEW"
    menuSubmenuEnd
}

# If the package needs additional configuration before installation
# create a function called setupappName, it will be called automatically.

if [[ $1 = --install ]]; then
    packageName=$2
    appName=${AppName[$packageName]}
    if [[ $packageName = scrot || $packageName = xfce4-screenshooter ]];then
        screenshooterExists "$packageName" || exit 1
    else
        appExists "$packageName" || exit 1
    fi

    terminalCheck -T "Install $appName" "$@"

    desc="This script will install $appName."
    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupBlender'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
            promptInstall --setup "$setupFunctionName" "$appName" "$desc" "$packageName"
    else
        if [[ $packageName = gimp ]];then
            if ! prompt 'This will install GIMP. Do you also want to install Gimp Extras?' N;then
                promptInstall "$appName" "$desc" "$packageName"
            else
                appName="Gimp and Gimp Extras"
                packageNameSet=(gimp gimp-plugin-registry gimp-gmic)
                desc="This script will install gimp, gimp-plugin-registry and gimp-gmic"
                promptInstall "$appName" "$desc" "${packageNameSet[@]}"
            fi
        else
            promptInstall "$appName" "$desc" "$packageName"
        fi
    fi

elif [[ $1 ]]; then
    echo "$0: no such option $*" >&2
    exit 1

else # pipemenu
    menuStart
    for curApp in "${GRAPHICS_APPS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            menuItem "${AppName[$curApp]}" "$curApp"
        fi
    done
    menu_started=false
    for curApp in "${GRAPHICS_APPS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $menu_started || menuSubmenu "graph-apps-install-submenu" "Install"
            menu_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done
    $menu_started && menuSubmenuEnd

    menuSeparator 'Screenshots'

    for curScrot in "${GRAPHICS_SCROTS[@]}"; do
        if [[ ${AppStatus[$curScrot]} = installed ]]; then
            if [[ "$curScrot" = scrot ]];then
                writeScrot
            else
                menuItem "${AppName[$curScrot]}" "$curScrot"
            fi
        fi
    done
    menu_started=false
    for curScrot in "${GRAPHICS_SCROTS[@]}"; do
        if ! [[ ${AppStatus[$curScrot]} = installed ]]; then
            $menu_started || menuSubmenu "graph-scrots-install-submenu" "Install"
            menu_started=true
            menuItem "Install ${AppName[$curScrot]}" "$0 --install $curScrot"
        fi
    done
    $menu_started && menuSubmenuEnd
    menuEnd
fi
exit 0
