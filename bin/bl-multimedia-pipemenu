#!/bin/bash
#    bl-multimedia-pipemenu - an Openbox pipemenu for Multimedia applications
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2015-2017 John Crawley    <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#   To add to the entries shown in the Multimedia pipemenu:
#   edit ".config/openbox/pipemenus.rc"

HELP='    bl-multimedia-pipemenu an Openbox Pipe Menu for multimedia applications
    It should normally be called from an openbox menu.

Options (usually passed from the menu):
    -h --help   show this message
    --install   install a multimedia package
    (the package must be in the list defined in the pipemenu config file
     or in the default list in this file)

    If bl-multimedia-pipemenu is called with no options (the usual method),
    it will output an xml openbox pipemenu
    for launching and installing multimedia applications.

See ~/.config/openbox/pipemenus.rc for configuration options.
'

# default apps lists
# user lists in ~/.config/openbox/pipemenus.rc will be merged
DEF_MM_APPS=('mpv' 'vlc' 'audacious' 'smplayer' 'gnome-mplayer')
DEF_MM_EDITORS=('mhwaveedit' 'audacity' 'openshot')
DEF_MM_UTILS=('xfburn' 'gtk-recordmydesktop')

# associative array: commands which are different from package names
# like: pkg_cmd=([name1]='command1' [name2]='command2' ...)
declare -A pkg_cmd
pkg_cmd=([mpv]='bl-mpv')
########################################################################

# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

BL_COMMON_LIBDIR='/usr/lib/bunsen/common'
USR_CFG_DIR="$HOME/.config/openbox"

# user_package_commands might be in $USR_CFG_DIR/pipemenus.rc
declare -A user_package_commands AppName AppStatus AppCmd

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo "Error: Failed to source bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG_DIR/pipemenus.rc" 2> /dev/null; then
    echo "Failed to source pipemenus.rc in $USR_CFG_DIR" >&2
fi

# add any user-specified commands, overwriting defaults if set
for i in "${!user_package_commands[@]}"
do
    [[ -n ${user_package_commands[$i]} ]] || continue
    pkg_cmd[$i]="${user_package_commands[$i]}"
done

# get BL alternatives player
bl_mp_cmd=$(readlink -f /usr/bin/bl-media-player)
bl_mp_cmd="${bl_mp_cmd##*/}"
BL_MM_APP=
for i in "${DEF_MM_APPS[@]}" "${MM_APPS[@]-}"
do
    [[ ${pkg_cmd[$i]:-$i} = "$bl_mp_cmd" ]] && {
        BL_MM_APP=$i
        # AppName: split on hyphens, first letter uppercase
        words=(${i//-/ })
        AppName[$i]="${words[*]^} Media Player"
        break
    }
done

# remove duplicate, and null, values of array passed as $1, keep order
nodups(){
    local -A check
    local -n target_array="$1"
    for i in "${!target_array[@]}"
    do
        local value="${target_array[$i]}"
        if [[ -z $value || ${check[$value]+x} = x ]]
        then
            unset target_array[$i]
        else
            check[$value]=1
        fi
    done
}

# if this function is removed the version in bl-include.cfg will be used
allInstalled(){
    local list="/var/lib/dpkg/info/${1}.list"
    [[ -f "${list}" ]] || return 1
    grep -Evq '^/etc($|/)' "${list}" || return 1
    return 0
}

MM_APPS=( "$BL_MM_APP" "${MM_APPS[@]-}" "${DEF_MM_APPS[@]}" )
MM_EDITORS=( "${MM_EDITORS[@]-}" "${DEF_MM_EDITORS[@]}" )
MM_UTILS=( "${MM_UTILS[@]-}" "${DEF_MM_UTILS[@]}" )

for i in MM_APPS MM_EDITORS MM_UTILS
do
    nodups "$i"
done

for curApp in "${MM_APPS[@]}" "${MM_EDITORS[@]}" "${MM_UTILS[@]}"; do
    words=(${curApp//-/ })
    AppName[$curApp]="${AppName[$curApp]:-${words[*]^}}"
    AppCmd[$curApp]="${pkg_cmd[$curApp]:-$curApp}" # use packagename as command if not defined in pkg_cmd
    allInstalled "$curApp" && AppStatus[$curApp]='installed' || AppStatus[$curApp]=''
done

appExists() {
    for curApp in "${!AppName[@]}"; do # if $packageName exists in MM_APPS MM_EDITORS MM_UTILS arrays
        [[ $curApp = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such application that I know of." 1 >&2
    say "You can try one of these: ${MM_APPS[*]} ${MM_EDITORS[*]} ${MM_UTILS[*]}" 2 >&2
    return 1
}

# If the package needs additional configuration before installation
# create a function called setupappName, it will be called automatically.

if [[ ${1-} = --install ]]; then
    packageName=$2
    appName=${AppName[$packageName]}
    appExists "$packageName" || exit 1

    terminalCheck -T "Install $appName" "$@"

    desc="This script will install $appName."
    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupChromium'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
        promptInstall --setup "$setupFunctionName" "$appName" "$desc" "$packageName"
    else
        promptInstall "$appName" "$desc" "$packageName"
    fi

elif [[ ${1-} ]]; then
    echo "$0: no such option $*" >&2
    exit 1

else # pipemenu
    menuStart

    for curApp in "${MM_APPS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            menuItem "${AppName[$curApp]}" "${AppCmd[$curApp]}"
        fi
    done

    editors_section_started=false
    for curApp in "${MM_EDITORS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            $editors_section_started || { menuSeparator; menuSeparator 'Editors';}
            editors_section_started=true
            menuItem "${AppName[$curApp]}" "${AppCmd[$curApp]}"
        fi
    done

    utils_section_started=false
    for curApp in "${MM_UTILS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            $utils_section_started || { menuSeparator; menuSeparator 'Utilities';}
            utils_section_started=true
            menuItem "${AppName[$curApp]}" "${AppCmd[$curApp]}"
        fi
    done

    install_menu_started=false

    for curApp in "${MM_APPS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $install_menu_started || { menuSeparator; menuSubmenu "mm-install-submenu" "Install";}
            install_menu_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done

    inst_editors_section_started=false
    for curApp in "${MM_EDITORS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $install_menu_started || { menuSeparator; menuSubmenu "mm-install-submenu" "Install";}
            $inst_editors_section_started || menuSeparator 'Editors'
            install_menu_started=true
            inst_editors_section_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done

    inst_utils_section_started=false
    for curApp in "${MM_UTILS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $install_menu_started || { menuSeparator; menuSubmenu "mm-install-submenu" "Install";}
            $inst_utils_section_started || menuSeparator 'Utilities'
            install_menu_started=true
            inst_utils_section_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done

    $install_menu_started && menuSubmenuEnd

    menuEnd
fi
exit 0
