#!/bin/bash
#    bl-install-pipemenu - a jgmenu pipemenu for installing applications
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#    Copyright (C) 2015 damo    <damo@bunsenlabs.org>
#    Copyright (C) 2018 Matthew T Hoare <matthew.t.hoare@gmail.com>
#    Copyright (C) 2015-2019 John Crawley    <john@bunsenlabs.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


HELP='    bl-install-pipemenu a jgmenu Pipe Menu for installing applications
    It should normally be called from a jgmenu menu.

Options (usually passed from the menu):
    -h --help   show this message
    --install   install a package
    (the package must be in the one of the app lists in this file)

    If bl-install-pipemenu is called with no options (the usual method),
    it will output a csv jgmenu pipemenu for installing applications.

'
###############################################

# jgmenu versions of OB menu creation functions
# These can be provided by /usr/lib/bunsen/common/bl-includes for any pipemenu.

# Associative array menu_content is generated.
# Submenu content is stored under index of its tag,
# 'root' indexes the root menu.

# not used at present
jgmenuStart() {
    :
}

# Usage: jgmenuItem tag label command
# Tag 'root' indicates root menu item.
jgmenuItem() {
    declare -Ag menu_content
    [[ $1 != root && -z ${menu_content[$1]} ]] && {
        menu_content[$1]="^tag($1)"$'\n'
    }
    menu_content[$1]+="\"\"\"${2}\"\"\"","\"\"\"${3}\"\"\""$'\n'
}

# Usage: jgmenuSeparator tag [label]
jgmenuSeparator() {
    declare -Ag menu_content
    [[ $1 != root && -z ${menu_content[$1]} ]] && {
        menu_content[$1]="^tag($1)"$'\n'
    }
    menu_content[$1]+="^sep(${2-})"$'\n'
}

# Usage jgmenuSubmenu tag(parentmenu) tag(submenu) label
jgmenuSubmenu() {
    declare -Ag menu_content
    [[ $1 != root && -z ${menu_content[$1]} ]] && {
        menu_content[$1]="^tag($1)"$'\n'
    }
    menu_content[$1]+="\"\"\"${3}\"\"\",^checkout($2)"$'\n'
}

# Usage jgmenuSubmenuSeparator tag [label]
# not used
jgmenuSubmenuEnd() {
    :
}

# Print root menu, then submenus.
jgmenuEnd() {
    printf '%b\n' "${menu_content[root]}"
    unset 'menu_content[root]'
    for i in "${!menu_content[@]}"
    do
        printf '%b\n' "${menu_content[$i]}"
    done
    unset 'menu_content'
}

########## end jgmenu functions ################

# install apps lists
MM_APPS=('mpv' 'vlc' 'audacious' 'smplayer' 'gnome-mpv')
MM_EDITORS=('mhwaveedit' 'audacity' 'openshot')
MM_UTILS=('xfburn' 'brasero' 'k3b' 'gtk-recordmydesktop' )
GRAPHICS_APPS=( 'mirage' 'viewnior' 'gpicview' 'ristretto' 'geeqie' 'gthumb' 'gimp' 'inkscape')
GRAPHICS_SCROTS=('xfce4-screenshooter' 'scrot')
LO_APPS=('libreoffice-writer' 'libreoffice-calc' 'libreoffice-impress' 'libreoffice-draw' 'libreoffice-base' 'libreoffice')

# associative array: commands which are different from package names
# These commands are used to test if the package is installed or not.
# If the package command is the same as its name it is not necessary to define it.
# If a package provides several commands, it is enough to define one.
declare -A pkg_cmd
#pkg_cmd[mpv]='bl-mpv'

########################################################################

# look for a help option somewhere
for i in "$@"
do
    case "$i" in
    -h|--help)
        echo "$HELP"
        exit 0
        ;;
    esac
done

BL_COMMON_LIBDIR='/usr/lib/bunsen/common'

if ! . "$BL_COMMON_LIBDIR/bl-includes" 2> /dev/null; then
    echo "Error: Failed to source bl-includes in $BL_COMMON_LIBDIR" >&2
    exit 1
fi

declare -A AppName AppStatus

for curApp in "${MM_APPS[@]}" "${MM_EDITORS[@]}" "${MM_UTILS[@]}" "${GRAPHICS_APPS[@]}" "${GRAPHICS_SCROTS[@]}"; do
    words=(${curApp//-/ })
    AppName[$curApp]="${AppName[$curApp]:-${words[*]^}}"
    command="${pkg_cmd[$curApp]:-$curApp}" # use package name as command if not defined in pkg_cmd
    hash "${command}" 2>/dev/null && AppStatus[$curApp]='installed' || AppStatus[$curApp]=''
done

# libreoffice packages have different commands
for curApp in "${LO_APPS[@]}"; do
    if [[ $curApp = libreoffice ]]; then
        AppName[$curApp]='LIBREOFFICE FULL SUITE'
        allInstalled "$curApp" && AppStatus[$curApp]='installed' || AppStatus[$curApp]=''
    else
        name="${curApp#libreoffice-}"
        AppName[$curApp]="LibreOffice ${name^}"
        hash "lo$name" 2>/dev/null && AppStatus[$curApp]='installed' || AppStatus[$curApp]=''
    fi
done

# If the package needs additional configuration before installation
# create a function called setupAppName, it will be called automatically.
# (This capability is not needed at the moment.)

# obsolete example:
#setupGoogleChromeStable() {
#    addAptKey "${KEY_URLS_GOOGLE[@]}" || return 1
#    say 'Creating APT sources file...' 1
#    echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee '/etc/apt/sources.list.d/google-chrome.list'
#}

if [[ ${1-} = --install ]]; then
    packageName=$2
    appName=${AppName[$packageName]}
    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupChromium'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
        "$setupFunctionName" || { echo "$0: function $setupFunctionName failed." >&2; exit 1;} # run setup function if it exists
    fi
    case "$packageName" in
    libreoffice)
        desc="This script will install the Full LibreOffice Suite"
        args=('bl-meta-libreoffice')
        ;;
    libreoffice-*)
        if allInstalled libreoffice-gtk2; then
            desc="This script will install $appName (without recommends)."
            args=( '--no-install-recommends' "$packageName" )
        else
            args=( '--no-install-recommends' "$packageName" 'libreoffice-gtk2' )
            desc="This script will install $appName and libreoffice-gtk2 (without recommends)."
        fi
        ;;
    *)
        desc="This script will install $appName."
        args=("$packageName")
        ;;
    esac
    /home/john/bin/bl-install --name "$appName" --message "$desc" "${args[@]}"

elif [[ ${1-} ]]; then
    echo "$0: no such option $*" >&2
    exit 1

else # pipemenu

    # This function is specific to this script.
    # It generates an install submenu for a group of packages.
    # Usage: generate_installmenu tag label list (of packages)
    generate_installmenu() {
        local tag=$1
        local label=$2
        shift 2
        for curApp in "${@}"; do
            if ! [[ ${AppStatus[$curApp]} = installed ]]; then
                jgmenuItem "$tag" "Install ${AppName[$curApp]}" "$0 --install $curApp"
            fi
        done
        [[ -n ${menu_content[$tag]} ]] && jgmenuSubmenu 'root' "$tag" "$label"
    }

    generate_installmenu 'mmapps' 'Multimedia Players'  "${MM_APPS[@]}"
    generate_installmenu 'mmeditors' 'Multimedia Editors' "${MM_EDITORS[@]}"
    generate_installmenu 'mmutils' 'Multimedia Utilities' "${MM_UTILS[@]}"
    generate_installmenu 'graphicapps' 'Graphics Apps' "${GRAPHICS_APPS[@]}"
    generate_installmenu 'graphicscrots' 'Graphics Scrots' "${GRAPHICS_SCROTS[@]}"
    generate_installmenu 'libreo' 'Libreoffice' "${LO_APPS[@]}"

    jgmenuEnd

#    menuEnd
fi
exit 0
