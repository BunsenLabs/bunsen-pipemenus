#!/bin/bash
# ---------------------------------------------------------------------
# A pipemenu to install a browser on Bunsen Labs Linux.
#
# Originally written for CrunchBang Linux <http://crunchbang.org/>
# by Philip Newborough (aka corenominal) <corenominal@corenominal.org>
#
# Modified by damo <damo@bunsenlabs.org> for BunsenLabs Linux   April 2015
#
#   To change the entries shown in the Browsers pipemenu:
#   edit ".config/openbox/pipemenus.rc"
#
# ---------------------------------------------------------------------

BL_COMMON_LIBDIR='/usr/lib/bunsen/bunsen-common'
USR_CFG_DIR="$HOME/.config/openbox"

# If the package needs additional configuration before installation
# create a function called setupBrowserName, it will be called automatically.

KEY_URLS_GOOGLE=('https://dl-ssl.google.com/linux/linux_signing_key.pub')
KEY_URLS_OPERA=('http://deb.opera.com/archive.key')

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG_DIR/pipemenus.rc" 2> /dev/null; then
    echo $"Error: Failed to locate pipemenus.rc in $USR_CFG_DIR" >&2
    exit 1
fi

declare -A AppName AppStatus # AppName: split on hyphens, first letter uppercase
for curApp in "${BROWSERS[@]}"; do
    words=(${curApp//-/ })
    AppName[$curApp]="${words[*]^}"
    type "$curApp" >/dev/null 2>&1 && AppStatus[$curApp]=installed
done

appExists() {
    for curApp in "${BROWSERS[@]}"; do # if $packageName exists in BROWSERS array
        [[ $curApp = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such browser that I know of." 1 >&2
    say "You can try one of these: ${BROWSERS[*]}" 2 >&2
    return 1
}

addAptKey() {
    clear
    say 'Adding APT key...'
    keyFile=$(mktemp)
    gotKey=false
    for curKey; do
        wget -O "$keyFile" "$curKey" 2> /dev/null && {
            gotKey=true
            say 'Key downloaded.'
            break
        } # success. No need to try other keys
        say "Failed to retrieve key from $curKey . Trying another source..."
    done
    if ! $gotKey; then
        say 'Failed to retrieve APT key!' 3 >&2
        return 1
    fi
    say 'Adding key'
    sudo apt-key add "$keyFile"
    rm -f "$keyFile"
    return 0
}

setupGoogleChromeStable() {
    addAptKey "${KEY_URLS_GOOGLE[@]}" || return 1
    say 'Creating APT sources file...' 1
    echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee '/etc/apt/sources.list.d/google-chrome.list'
}

setupOpera() {
    addAptKey "${KEY_URLS_OPERA[@]}" || return 1
    say 'Creating APT sources file...' 1
    echo 'deb http://deb.opera.com/opera/ stable non-free' | sudo tee '/etc/apt/sources.list.d/opera.list'
}

if [[ $1 = --install ]]; then
    packageName=$2
    appName=${AppName[$packageName]}
    appExists "$packageName" || exit 1

    terminalCheck -T "Install $appName" "$@"

    desc="This script will install the $appName browser."
    setupFunctionName="setup${appName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupChromium'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
        promptInstall --setup "$setupFunctionName" "$appName" "$desc" "$packageName"
    else
        promptInstall "$appName" "$desc" "$packageName"
    fi

elif [[ $1 ]]; then
    echo "$0: no such option $*" >&2
    exit 1

else # pipemenu
    INSTALLED=false
    menuStart

    for curApp in "${BROWSERS[@]}"; do
        if [[ ${AppStatus[$curApp]} = installed ]]; then
            INSTALLED=true
            menuItem "${AppName[$curApp]}" "$curApp"
            [[ $curApp = *chrom* ]] && {
                menuItem "${AppName[$curApp]} (Private Mode)" "$curApp --incognito" # Incognito mode for chrome and chromium
            }
        fi
    done
    menu_started=false
    for curApp in "${BROWSERS[@]}"; do
        if ! [[ ${AppStatus[$curApp]} = installed ]]; then
            $menu_started || menuSubmenu "browsers-install-submenu" "Install"
            menu_started=true
            menuItem "Install ${AppName[$curApp]}" "$0 --install $curApp"
        fi
    done
    $menu_started && menuSubmenuEnd

    if $INSTALLED ; then
        menuSeparator
        menuItem 'Select Default Browser' "x-terminal-emulator -T 'Select Default Browser' -e sudo update-alternatives --config x-www-browser"
    fi
    menuEnd
fi
exit 0
