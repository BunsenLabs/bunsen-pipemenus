#!/bin/bash
# ---------------------------------------------------------------------
# A pipemenu to install a browser on Bunsen Labs Linux.
# Originally written for CrunchBang Linux <http://crunchbang.org/>
# by Philip Newborough (aka corenominal) <corenominal@corenominal.org>
# ---------------------------------------------------------------------
#	To change the entries shown in the Browsers pipemenu
#	edit ".config/openbox/menu-browsers.cfg"
#----------------------------------------------------------------------

BL_COMMON_LIBDIR='/usr/lib/bunsen/bunsen-common'
USR_CFG='.config/openbox/menu-browsers.cfg'

source $USR_CFG

# If the package needs additional configuration before installation
# create a function called setupBrowserName, it will be called automatically.

KEY_URLS_GOOGLE=('https://dl-ssl.google.com/linux/linux_signing_key.pub' 'http://packages.crunchbang.org/waldorf-files/apt-keys/google-chrome.key')
KEY_URLS_OPERA=('http://deb.opera.com/archive.key' 'http://packages.crunchbang.org/waldorf-files/apt-keys/opera.key')

if ! . "$BL_COMMON_LIBDIR/bl-include.cfg" 2> /dev/null; then
    echo $"Error: Failed to locate bl-include.cfg in $BL_COMMON_LIBDIR" >&2
    exit 1
elif ! . "$USR_CFG" 2> /dev/null; then
	echo $"Error: Failed to locate menu-multimedia.cfg in $BL_COMMON_LIBDIR" >&2
	exit 1
fi

browserExists() {
    for curTool in "${TOOLS[@]}"; do # if $packageName exists in tools array
        [[ $curTool = "$1" ]] &&
            return 0
    done
    say "Unable to install $1. There is no such browser that I know of." 1 >&2
    say "You can try one of these: ${TOOLS[*]}" 2 >&2
    return 1
}

addAptKey() {
    clear
    say 'Adding APT key...'
    keyFile=$(mktemp)
    gotKey=false
    for curKey; do
        wget -O "$keyFile" "$curKey" 2> /dev/null && {
            gotKey=true
            say 'Key downloaded.'
            break
        } # success. No need to try other keys
        say "Failed to retrieve key from $curKey . Trying another source..."
    done
    if ! $gotKey; then
        say 'Failed to retrieve APT key!' 3 >&2
        return 1
    fi
    say 'Adding key'
    sudo apt-key add "$keyFile"
    rm -f "$keyFile"
    return 0
}

setupGoogleChromeStable() {
    addAptKey "${KEY_URLS_GOOGLE[@]}" || return 1
    say 'Creating APT sources file...' 1
    echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee '/etc/apt/sources.list.d/google-chrome.list'
}

setupOpera() {
    addAptKey "${KEY_URLS_OPERA[@]}" || return 1
    say 'Creating APT sources file...' 1
    echo 'deb http://deb.opera.com/opera/ stable non-free' | sudo tee '/etc/apt/sources.list.d/opera.list'
}

if [[ $1 && ! $1 = --install-* ]]; then
    packageName=${1#--}
    read -ra words <<< "${packageName//-/ }"
    x-terminal-emulator --title "Install ${words[*]^}" -e "$0" "--install-$packageName"

elif [[ $1 = --install-* ]]; then
    packageName=${1#--install-}
    browserExists "$packageName" || exit 1
    browserName=${packageName//-/ }
    read -ra words <<< "$browserName"
    browserName=${words[*]^}
    browserNameUpper=${browserName^^}

    setupFunctionName="setup${browserName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupChromium'
    if [[ $(type -t "$setupFunctionName") = 'function' ]]; then
        export setupFunctionName
    else
        unset setupFunctionName
    fi

    promptInstall "${browserNameUpper% BROWSER} BROWSER" "$browserName" "$packageName"

else # pipemenu
    INSTALLED=false
    menuStart
    for curTool in "${TOOLS[@]}"; do
        read -ra words <<< "${curTool//-/ }"
        curToolName=${words[*]^}
        if type "$curTool" &> /dev/null; then
            INSTALLED=true
            menuItem "$curToolName" "$curTool"
            [[ $curTool = chrom* ]] &&
                menuItem "$curToolName (Private Mode)" "$curTool --incognito" # Incognito mode for chrome and chromium
        else
            menuItem "Install $curToolName" "$0 --$curTool"
        fi
    done

    if $INSTALLED ; then
        menuSeparator
        menuItem 'Select default browser' 'x-terminal-emulator -e sudo update-alternatives --config x-www-browser'
    fi
    menuEnd
fi
exit 0
